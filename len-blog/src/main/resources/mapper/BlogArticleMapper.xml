<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.len.mapper.BlogArticleMapper">
  <resultMap id="BaseResultMap" type="com.len.entity.BlogArticle">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="read_number" jdbcType="INTEGER" property="readNumber" />
    <result column="top_num" jdbcType="INTEGER" property="topNum" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>


  <select id="selectListByPage" parameterType="com.len.entity.BlogArticle" resultMap="BaseResultMap">
    SELECT id,code,title,read_number,top_num,create_by,create_date,
    left(content,50) content
    from blog_article
    <where>
      <if test="title!=null and title!=''"> and title like concat(concat('%',#{title}),'%')</if>
      <if test="content!=null and content!=''"> and content like concat(concat('%',#{content}),'%')</if>
    </where>
    order by read_number asc,create_date desc
  </select>

  <select id="selectArticle" resultMap="BaseResultMap">
      select ba.id,ba.code,ba.title,ba.read_number,ba.top_num,ba.create_by,ba.create_date,
        left(ba.content,50) content
      from
        blog_article ba
      left JOIN
        blog_article_category bac
      on
        ba.id=bac.article_id
      LEFT JOIN
        blog_category bc
      on
        bac.category_id=bc.id
     <where>
       <if test="code!=null and code!=''">
         bc.code=#{code}
       </if>
     </where>
    order by ba.top_num desc,ba.create_date desc
  </select>

  <select id="selectArticleByTag" resultMap="BaseResultMap">
      select ba.id,ba.code,ba.title,ba.read_number,ba.top_num,ba.create_by,ba.create_date,
        left(ba.content,50) content
      from
        blog_article ba
      LEFT JOIN
        blog_article_tag bat
      on
        ba.id=bat.article_id
      LEFT JOIN
        blog_tag bt
      on
        bat.tag_id=bt.id
      where
        bt.tag_code=#{tagCode}
  </select>
</mapper>